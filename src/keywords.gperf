struct Keyword { const char *name; int token; int32_t syntax; }
%%
const,			T_CONST,	SYNTAX_OLD | SYNTAX_NEW
select,			T_SELECT,	SYNTAX_NEW
guard,			T_GUARD,	SYNTAX_OLD | SYNTAX_NEW
sync,			T_SYNC,		SYNTAX_OLD | SYNTAX_NEW
assign,			T_ASSIGN,	SYNTAX_OLD | SYNTAX_NEW
probability,		T_PROBABILITY,	SYNTAX_OLD | SYNTAX_NEW
process,		T_PROCESS,	SYNTAX_OLD | SYNTAX_NEW
state,			T_STATE,	SYNTAX_OLD | SYNTAX_NEW
branchpoint,		T_BRANCHPOINT,	SYNTAX_OLD | SYNTAX_NEW
init,			T_INIT,		SYNTAX_OLD | SYNTAX_NEW
trans,			T_TRANS,	SYNTAX_OLD | SYNTAX_NEW
urgent,			T_URGENT,	SYNTAX_OLD | SYNTAX_NEW
commit,			T_COMMIT,	SYNTAX_OLD | SYNTAX_NEW
broadcast,              T_BROADCAST,    SYNTAX_OLD | SYNTAX_NEW
system,			T_SYSTEM,	SYNTAX_OLD | SYNTAX_NEW | SYNTAX_PROPERTY
true,			T_TRUE,		SYNTAX_OLD | SYNTAX_NEW | SYNTAX_PROPERTY
false,			T_FALSE,	SYNTAX_OLD | SYNTAX_NEW | SYNTAX_PROPERTY
and,			T_KW_AND,	SYNTAX_OLD | SYNTAX_NEW | SYNTAX_PROPERTY
or,			T_KW_OR,	SYNTAX_OLD | SYNTAX_NEW | SYNTAX_PROPERTY
xor,                    T_KW_XOR,       SYNTAX_NEW
not,			T_KW_NOT,	SYNTAX_OLD | SYNTAX_NEW | SYNTAX_PROPERTY
imply,			T_KW_IMPLY,	SYNTAX_OLD | SYNTAX_NEW | SYNTAX_PROPERTY
for,			T_FOR,		SYNTAX_NEW
while,			T_WHILE,	SYNTAX_NEW
do, 			T_DO,		SYNTAX_NEW
if, 			T_IF,		SYNTAX_NEW
else, 			T_ELSE,		SYNTAX_NEW
default, 		T_DEFAULT,	SYNTAX_NEW
return, 		T_RETURN,	SYNTAX_NEW
typedef,		T_TYPEDEF,	SYNTAX_NEW
struct,			T_STRUCT,	SYNTAX_NEW
meta,			T_META,		SYNTAX_NEW
before_update,	        T_BEFORE,	SYNTAX_NEW
after_update,	        T_AFTER,	SYNTAX_NEW
progress,		T_PROGRESS,	SYNTAX_NEW
gantt,                  T_GANTT,        SYNTAX_NEW
assert,			T_ASSERT,	SYNTAX_NEW
IO,			T_IO,		SYNTAX_NEW
forall, 		T_FORALL,	SYNTAX_NEW | SYNTAX_PROPERTY
exists, 		T_EXISTS,	SYNTAX_NEW | SYNTAX_PROPERTY
sum,			T_SUM,		SYNTAX_NEW | SYNTAX_PROPERTY
deadlock,		T_DEADLOCK,	SYNTAX_PROPERTY
priority,		T_PRIORITY,	SYNTAX_OLD | SYNTAX_NEW
bool,			T_BOOL,		SYNTAX_OLD | SYNTAX_NEW
int,			T_INT,		SYNTAX_OLD | SYNTAX_NEW | SYNTAX_PROPERTY
double,                 T_DOUBLE,       SYNTAX_OLD | SYNTAX_NEW
chan,			T_CHAN,		SYNTAX_OLD | SYNTAX_NEW
clock,			T_CLOCK,	SYNTAX_OLD | SYNTAX_NEW
void,			T_VOID,		SYNTAX_OLD | SYNTAX_NEW
scalar,			T_SCALAR,	SYNTAX_OLD | SYNTAX_NEW | SYNTAX_PROPERTY
control,                T_CONTROL,      SYNTAX_PROPERTY | SYNTAX_TIGA
control_t,              T_CONTROL_T,    SYNTAX_PROPERTY | SYNTAX_TIGA
simulation,             T_SIMULATION,   SYNTAX_PROPERTY | SYNTAX_TIGA
simulate,               T_SIMULATE,     SYNTAX_PROPERTY
refinement,             T_REFINEMENT,   SYNTAX_PROPERTY | SYNTAX_TIGA
consistency,            T_CONSISTENCY,  SYNTAX_PROPERTY | SYNTAX_TIGA
specification,          T_SPECIFICATION,SYNTAX_PROPERTY | SYNTAX_TIGA
implementation,         T_IMPLEMENTATION,SYNTAX_PROPERTY | SYNTAX_TIGA
sat,                    T_SCENARIO,     SYNTAX_PROPERTY
inf,                    T_INF,          SYNTAX_PROPERTY
sup,                    T_SUP,          SYNTAX_PROPERTY
Pmax,			T_PMAX,		SYNTAX_PROPERTY | SYNTAX_PROB
Pr,                     T_PROBA,        SYNTAX_PROPERTY
X,                      T_MITL_NEXT,    SYNTAX_PROPERTY
abs,                    T_ABS,          SYNTAX_PROPERTY | SYNTAX_NEW
fabs,                   T_FABS,         SYNTAX_PROPERTY | SYNTAX_NEW
fmod,                   T_FMOD,         SYNTAX_PROPERTY | SYNTAX_NEW
fma,                    T_FMA,          SYNTAX_PROPERTY | SYNTAX_NEW
fmax,                   T_FMAX,         SYNTAX_PROPERTY | SYNTAX_NEW
fmin,                   T_FMIN,         SYNTAX_PROPERTY | SYNTAX_NEW
fdim,                   T_FDIM,         SYNTAX_PROPERTY | SYNTAX_NEW
exp,                    T_EXP,          SYNTAX_PROPERTY | SYNTAX_NEW
exp2,                   T_EXP2,         SYNTAX_PROPERTY | SYNTAX_NEW
expm1,                  T_EXPM1,        SYNTAX_PROPERTY | SYNTAX_NEW
ln,                     T_LN,           SYNTAX_PROPERTY | SYNTAX_NEW
log,                    T_LOG,          SYNTAX_PROPERTY | SYNTAX_NEW
log10,                  T_LOG10,        SYNTAX_PROPERTY | SYNTAX_NEW
log2,                   T_LOG2,         SYNTAX_PROPERTY | SYNTAX_NEW
log1p,                  T_LOG1P,        SYNTAX_PROPERTY | SYNTAX_NEW
pow,                    T_POW,          SYNTAX_PROPERTY | SYNTAX_NEW
sqrt,                   T_SQRT,         SYNTAX_PROPERTY | SYNTAX_NEW
cbrt,                   T_CBRT,         SYNTAX_PROPERTY | SYNTAX_NEW
hypot,                  T_HYPOT,        SYNTAX_PROPERTY | SYNTAX_NEW
sin,                    T_SIN,          SYNTAX_PROPERTY | SYNTAX_NEW
cos,                    T_COS,          SYNTAX_PROPERTY | SYNTAX_NEW
tan,                    T_TAN,          SYNTAX_PROPERTY | SYNTAX_NEW
asin,                   T_ASIN,         SYNTAX_PROPERTY | SYNTAX_NEW
acos,                   T_ACOS,         SYNTAX_PROPERTY | SYNTAX_NEW
atan,                   T_ATAN,         SYNTAX_PROPERTY | SYNTAX_NEW
atan2,                  T_ATAN2,        SYNTAX_PROPERTY | SYNTAX_NEW
sinh,                   T_SINH,         SYNTAX_PROPERTY | SYNTAX_NEW
cosh,                   T_COSH,         SYNTAX_PROPERTY | SYNTAX_NEW
tanh,                   T_TANH,         SYNTAX_PROPERTY | SYNTAX_NEW
asinh,                  T_ASINH,        SYNTAX_PROPERTY | SYNTAX_NEW
acosh,                  T_ACOSH,        SYNTAX_PROPERTY | SYNTAX_NEW
atanh,                  T_ATANH,        SYNTAX_PROPERTY | SYNTAX_NEW
erf,                    T_ERF,          SYNTAX_PROPERTY | SYNTAX_NEW
erfc,                   T_ERFC,         SYNTAX_PROPERTY | SYNTAX_NEW
tgamma,                 T_TGAMMA,       SYNTAX_PROPERTY | SYNTAX_NEW
lgamma,                 T_LGAMMA,       SYNTAX_PROPERTY | SYNTAX_NEW
ceil,                   T_CEIL,         SYNTAX_PROPERTY | SYNTAX_NEW
floor,                  T_FLOOR,        SYNTAX_PROPERTY | SYNTAX_NEW
trunc,                  T_TRUNC,        SYNTAX_PROPERTY | SYNTAX_NEW
round,                  T_ROUND,        SYNTAX_PROPERTY | SYNTAX_NEW
fint,                   T_FINT,         SYNTAX_PROPERTY | SYNTAX_NEW
ldexp,                  T_LDEXP,        SYNTAX_PROPERTY | SYNTAX_NEW
ilogb,                  T_ILOGB,        SYNTAX_PROPERTY | SYNTAX_NEW
logb,                   T_LOGB,         SYNTAX_PROPERTY | SYNTAX_NEW
nextafter,              T_NEXTAFTER,    SYNTAX_PROPERTY | SYNTAX_NEW
copysign,               T_COPYSIGN,     SYNTAX_PROPERTY | SYNTAX_NEW
fpclassify,             T_FPCLASSIFY,   SYNTAX_PROPERTY | SYNTAX_NEW
isfinite,               T_ISFINITE,     SYNTAX_PROPERTY | SYNTAX_NEW
isinf,                  T_ISINF,        SYNTAX_PROPERTY | SYNTAX_NEW
isnan,                  T_ISNAN,        SYNTAX_PROPERTY | SYNTAX_NEW
isnormal,               T_ISNORMAL,     SYNTAX_PROPERTY | SYNTAX_NEW
signbit,                T_SIGNBIT,      SYNTAX_PROPERTY | SYNTAX_NEW
isunordered,            T_ISUNORDERED,  SYNTAX_PROPERTY | SYNTAX_NEW
random,                 T_RANDOM,       SYNTAX_PROPERTY | SYNTAX_NEW
random_arcsine,         T_RANDOM_ARCSINE,SYNTAX_PROPERTY | SYNTAX_NEW
random_beta,          	T_RANDOM_BETA, 	 SYNTAX_PROPERTY | SYNTAX_NEW
random_gamma,          	T_RANDOM_GAMMA,  SYNTAX_PROPERTY | SYNTAX_NEW
random_normal,          T_RANDOM_NORMAL, SYNTAX_PROPERTY | SYNTAX_NEW
random_poisson,        	T_RANDOM_POISSON,SYNTAX_PROPERTY | SYNTAX_NEW
random_tri,				T_RANDOM_TRI,	SYNTAX_PROPERTY | SYNTAX_NEW
random_weibull,        	T_RANDOM_WEIBULL,SYNTAX_PROPERTY | SYNTAX_NEW
hybrid,                 T_HYBRID,	SYNTAX_NEW
dynamic,                T_DYNAMIC,      SYNTAX_NEW
spawn,                  T_SPAWN,        SYNTAX_NEW
exit,                   T_EXIT,         SYNTAX_NEW
numOf,                  T_NUMOF,        SYNTAX_PROPERTY
foreach,                T_FOREACH,      SYNTAX_PROPERTY
query,                  T_QUERY,        SYNTAX_NEW
%%

bool isKeyword(const char *id, uint32_t syntax)
{
    const Keyword *keyword = Keywords::in_word_set(id, strlen(id));
    return (keyword != NULL && (keyword->syntax & syntax));
}
